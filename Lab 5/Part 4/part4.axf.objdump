
D:/ECE243/Lab 5/Part 4/part4.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
          .text                   // executable code follows
          .global _start
		  
_start:		MOV SP, #0x2000
   0:	e3a0da02 	mov	sp, #8192	; 0x2000
			LDR R8, =0xFF200020		//R8 has the addres of HEX0-3
   4:	e59f8174 	ldr	r8, [pc, #372]	; 180 <DISPLAY_NUMS+0x28>
			LDR	R9, =0xFFFFFFFF		//Used to reset the edge capture
   8:	e3e09000 	mvn	r9, #0
			STR R9, [R8, #0x3C]
   c:	e588903c 	str	r9, [r8, #60]	; 0x3c
			MOV R10, #DISPLAY_NUMS	//Bit codes for the hex display
  10:	e3a0af56 	mov	r10, #344	; 0x158
			LDR R11, =0xFFFEC600		//Addr of internal timer
  14:	e59fb168 	ldr	r11, [pc, #360]	; 184 <DISPLAY_NUMS+0x2c>
			MOV R12, #1
  18:	e3a0c001 	mov	r12, #1
			STR R12, [R11, #0xC]
  1c:	e58bc00c 	str	r12, [r11, #12]
			MOV R12, #0
  20:	e3a0c000 	mov	r12, #0
			STR R12, [R11, #0x8]
  24:	e58bc008 	str	r12, [r11, #8]
			LDR R12, =0x01312D00	//0.1 seconds at 200MHz
  28:	e59fc158 	ldr	r12, [pc, #344]	; 188 <DISPLAY_NUMS+0x30>
			STR R12, [R11]			//Puts load value into timer
  2c:	e58bc000 	str	r12, [r11]
			MOV R0, #0
  30:	e3a00000 	mov	r0, #0
			MOV R1, #0
  34:	e3a01000 	mov	r1, #0
			MOV R2, #0
  38:	e3a02000 	mov	r2, #0
			MOV R3, #0
  3c:	e3a03000 	mov	r3, #0

00000040 <MAIN>:
			
//Increments the hex display with a start/stop button		
MAIN:		LDR R2, [R8, #0x3C]		//Saves key value
  40:	e598203c 	ldr	r2, [r8, #60]	; 0x3c
			CMP R2, #0
  44:	e3520000 	cmp	r2, #0
			BEQ	MAIN
  48:	0afffffc 	beq	40 <MAIN>
			STR R9, [R8, #0x3C]
  4c:	e588903c 	str	r9, [r8, #60]	; 0x3c
			MOV R2, #0
  50:	e3a02000 	mov	r2, #0

00000054 <INC>:
			
INC:		BL COUNTER
  54:	eb000002 	bl	64 <COUNTER>
			BL PUSH
  58:	eb000016 	bl	b8 <PUSH>
			BL DISPLAY
  5c:	eb00002a 	bl	10c <DISPLAY>
			B INC
  60:	eafffffb 	b	54 <INC>

00000064 <COUNTER>:

//Increments The counter to the next
//display bit 
COUNTER:	CMP R0, #36 //If R0 == 9 then change R1
  64:	e3500024 	cmp	r0, #36	; 0x24
			BEQ TENS
  68:	0a000001 	beq	74 <TENS>
			ADD R0, #4
  6c:	e2800004 	add	r0, r0, #4
			MOV PC, LR
  70:	e1a0f00e 	mov	pc, lr

00000074 <TENS>:
			
TENS:		MOV R0, #0
  74:	e3a00000 	mov	r0, #0
			CMP R1, #36 //If R1 == 9 then change R2
  78:	e3510024 	cmp	r1, #36	; 0x24
			BEQ HUNDREDS
  7c:	0a000001 	beq	88 <HUNDREDS>
			ADD R1, #4
  80:	e2811004 	add	r1, r1, #4
			MOV PC, LR
  84:	e1a0f00e 	mov	pc, lr

00000088 <HUNDREDS>:
			
HUNDREDS:	MOV R1, #0
  88:	e3a01000 	mov	r1, #0
			CMP R2, #36	//If R2 == 9 then change R3
  8c:	e3520024 	cmp	r2, #36	; 0x24
			BEQ THOUSANDS
  90:	0a000001 	beq	9c <THOUSANDS>
			ADD R2, #4
  94:	e2822004 	add	r2, r2, #4
			MOV PC, LR
  98:	e1a0f00e 	mov	pc, lr

0000009c <THOUSANDS>:
			
THOUSANDS:	MOV R2, #0
  9c:	e3a02000 	mov	r2, #0
			CMP R3, #20	//If R5 == 5 then reset counter
  a0:	e3530014 	cmp	r3, #20
			BEQ RESET
  a4:	0a000001 	beq	b0 <RESET>
			ADD R3, #4
  a8:	e2833004 	add	r3, r3, #4
			MOV PC, LR
  ac:	e1a0f00e 	mov	pc, lr

000000b0 <RESET>:

RESET:		MOV R3, #0	//Reset the display/counter
  b0:	e3a03000 	mov	r3, #0
			MOV PC, LR
  b4:	e1a0f00e 	mov	pc, lr

000000b8 <PUSH>:

//Creates a delay of about 0.25 seconds
PUSH:		PUSH {R0, R1, R2, R3}
  b8:	e92d000f 	push	{r0, r1, r2, r3}

000000bc <DELAY>:
DELAY:		MOV R0, #0x3
  bc:	e3a00003 	mov	r0, #3
			STR R9, [R8, #0x3C]		//Resets the edge capture 
  c0:	e588903c 	str	r9, [r8, #60]	; 0x3c
			STR R0, [R11, #0x8]		//Starts the timer
  c4:	e58b0008 	str	r0, [r11, #8]

000000c8 <TIMER>:
			
TIMER:		LDR R0, [R11, #0xC]
  c8:	e59b000c 	ldr	r0, [r11, #12]
			LDR R1, [R8, #0x3C]
  cc:	e598103c 	ldr	r1, [r8, #60]	; 0x3c
			CMP R1, #1
  d0:	e3510001 	cmp	r1, #1
			BEQ STOP		//Check for edge capture
  d4:	0a000007 	beq	f8 <STOP>
			CMP R0, #1
  d8:	e3500001 	cmp	r0, #1
			BNE TIMER		//Check if the timer is done
  dc:	1afffff9 	bne	c8 <TIMER>
			MOV R0, #0		
  e0:	e3a00000 	mov	r0, #0
			STR R0, [R11, #0x8]		//Stop the timer
  e4:	e58b0008 	str	r0, [r11, #8]
			MOV R0, #1
  e8:	e3a00001 	mov	r0, #1
			STR R0, [R11, #0xC]		//Reset the F bit
  ec:	e58b000c 	str	r0, [r11, #12]
			POP {R0, R1, R2, R3}
  f0:	e8bd000f 	pop	{r0, r1, r2, r3}
			MOV PC, LR
  f4:	e1a0f00e 	mov	pc, lr

000000f8 <STOP>:

//Waits till the start button is pressed again
STOP:		STR R9, [R8, #0x3C]	
  f8:	e588903c 	str	r9, [r8, #60]	; 0x3c

000000fc <START>:

START:		LDR R2, [R8, #0x3C]
  fc:	e598203c 	ldr	r2, [r8, #60]	; 0x3c
			CMP R2, #1
 100:	e3520001 	cmp	r2, #1
			BEQ DELAY
 104:	0affffec 	beq	bc <DELAY>
			B START
 108:	eafffffb 	b	fc <START>

0000010c <DISPLAY>:

//Displays the decimal value to the hex display
DISPLAY:	PUSH {R0, R1}
 10c:	e92d0003 	push	{r0, r1}
			LDR R0, [R10, R0]
 110:	e79a0000 	ldr	r0, [r10, r0]
			LDR R1, [R10, R1]
 114:	e79a1001 	ldr	r1, [r10, r1]
			LSL R1, #8
 118:	e1a01401 	lsl	r1, r1, #8
			ADD R0, R1
 11c:	e0800001 	add	r0, r0, r1
			PUSH {R2}
 120:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
			LDR R2, [R10, R2]
 124:	e79a2002 	ldr	r2, [r10, r2]
			LSL R2, #16
 128:	e1a02802 	lsl	r2, r2, #16
			ADD R0, R2
 12c:	e0800002 	add	r0, r0, r2
			PUSH {R3}
 130:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
			LDR R3, [R10, R3]
 134:	e79a3003 	ldr	r3, [r10, r3]
			LSL R3, #24
 138:	e1a03c03 	lsl	r3, r3, #24
			ADD R0, R3
 13c:	e0800003 	add	r0, r0, r3
			STR R0, [R8]
 140:	e5880000 	str	r0, [r8]
			POP {R3}
 144:	e49d3004 	pop	{r3}		; (ldr r3, [sp], #4)
			POP {R2}
 148:	e49d2004 	pop	{r2}		; (ldr r2, [sp], #4)
			POP {R0}
 14c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
			POP {R1}
 150:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
			MOV PC, LR
 154:	e1a0f00e 	mov	pc, lr

00000158 <DISPLAY_NUMS>:
 158:	0000003f 	.word	0x0000003f
 15c:	00000006 	.word	0x00000006
 160:	0000005b 	.word	0x0000005b
 164:	0000004f 	.word	0x0000004f
 168:	00000066 	.word	0x00000066
 16c:	0000006d 	.word	0x0000006d
 170:	0000007d 	.word	0x0000007d
 174:	00000007 	.word	0x00000007
 178:	0000007f 	.word	0x0000007f
 17c:	00000067 	.word	0x00000067
 180:	ff200020 	.word	0xff200020
 184:	fffec600 	.word	0xfffec600
 188:	01312d00 	.word	0x01312d00
